// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenFactory is Ownable, ReentrancyGuard {
    uint256 public creationFee;
    address payable public feeRecipient;

    event TokenCreated(address indexed tokenAddress, string tokenName, string tokenSymbol, uint256 indexed decimals);
    
    constructor(uint256 _creationFee, address payable _feeRecipient) {
        require(_feeRecipient != address(0), "Fee recipient cannot be the zero address");
        creationFee = _creationFee;
        feeRecipient = _feeRecipient;
    }

    function createToken(
        string memory name,
        string memory symbol,
        uint256 maximumSupply,
        uint8 decimals
        ) public payable nonReentrant {
        require(msg.value >= creationFee, "Must pay the creation fee");
        // Send the creation fee to the fee recipient
        feeRecipient.transfer(creationFee);
        // Refund any excess amount sent
        if (msg.value > creationFee) {
            payable(msg.sender).transfer(msg.value - creationFee);
        }

        uint256 supplyWithDecimals = maximumSupply * (10 ** uint256(decimals));
        NewToken mintToken = new NewToken(name, symbol, supplyWithDecimals, msg.sender, decimals);
        mintToken.transferOwnership(msg.sender); // Transfer ownership to the token creator
        emit TokenCreated(address(mintToken), name, symbol, decimals);
    }

    function setCreationFee(uint256 newFee) external onlyOwner {
        creationFee = newFee;
    }

    function setFeeRecipient(address payable newRecipient) external onlyOwner {
        require(newRecipient != address(0), "New recipient cannot be the zero address");
        feeRecipient = newRecipient;
    }

    // Allow the owner to renounce ownership of the TokenFactory contract.
    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }
}

// NewToken extends the ERC20 implementation from OpenZeppelin and adds a burn function.
contract NewToken is ERC20, Ownable, ReentrancyGuard {
    uint256 private _maximumSupply;
    uint8 private _customDecimals;
    
    struct VestingSchedule {
        uint256 start;
        uint256 cliff;
        uint256 duration;
        uint256 amount;
        uint256 released;
    }

    mapping(address => VestingSchedule[]) public vestingSchedules;

    event TokensReleased(address beneficiary, uint256 amount);
    event VestingAdded(address indexed beneficiary, uint256 amount, uint256 start, uint256 cliff, uint256 duration);

    constructor(
        string memory name,
        string memory symbol,
        uint256 maxSupply,
        address tokenOwner,
        uint8 Decimals
    ) ERC20(name, symbol) {
        require(tokenOwner != address(0), "Token owner cannot be the zero address");
        _customDecimals = Decimals;
        _maximumSupply = maxSupply;
        _mint(tokenOwner, maxSupply);  // Consider vesting requirements before minting the total supply
    }

    function addVestingSchedule(
        address beneficiary,
        uint256 start,
        uint256 cliff,
        uint256 duration,
        uint256 amount
    ) public onlyOwner {
        require(beneficiary != address(0), "Beneficiary cannot be the zero address");
        require(duration > 0, "Duration must be > 0");
        require(cliff >= start, "Cliff must be >= start");
        require(amount > 0, "Amount must be > 0");
        //require(totalSupply().add(amount) <= _maximumSupply, "Cannot vest more than the maximum supply");

    // Check if a similar vesting schedule already exists for the beneficiary
    bool scheduleExists = false;
    for (uint i = 0; i < vestingSchedules[beneficiary].length; i++) {
        if (vestingSchedules[beneficiary][i].start == start &&
            vestingSchedules[beneficiary][i].cliff == cliff &&
            vestingSchedules[beneficiary][i].duration == duration &&
            vestingSchedules[beneficiary][i].amount == amount) {
            scheduleExists = true;
            break;
        }
    }
        require(!scheduleExists, "Vesting schedule already exists");

        vestingSchedules[beneficiary].push(VestingSchedule(start, cliff, duration, amount, 0));
        _mint(beneficiary, amount); // Mint tokens directly to the beneficiary's address, to be released according to the vesting schedule

        emit VestingAdded(beneficiary, amount, start, cliff, duration);
    }

    function releaseVestedTokens(address beneficiary, uint256 scheduleIndex) public nonReentrant {
        require(scheduleIndex < vestingSchedules[beneficiary].length, "Invalid schedule index");

        VestingSchedule storage schedule = vestingSchedules[beneficiary][scheduleIndex];
        require(block.timestamp >= schedule.cliff, "Cliff not reached");

        uint256 unreleased = releasableAmount(beneficiary, scheduleIndex);
        require(unreleased > 0, "No tokens are due");

        schedule.released += unreleased;
        transfer(beneficiary, unreleased);

        emit TokensReleased(beneficiary, unreleased);
        }

    function releasableAmount(address beneficiary, uint256 scheduleIndex) public view returns (uint256) {
        require(scheduleIndex < vestingSchedules[beneficiary].length, "Invalid schedule index");

        VestingSchedule storage schedule = vestingSchedules[beneficiary][scheduleIndex];
        if (block.timestamp < schedule.cliff) {
            return 0;
        } else if (block.timestamp >= schedule.start + schedule.duration) {
            return schedule.amount - schedule.released;
        } else {
            uint256 durationPassed = block.timestamp - schedule.start;
            uint256 totalVestingTime = schedule.duration;
            uint256 vestedAmount = schedule.amount * durationPassed / totalVestingTime;
            return vestedAmount - schedule.released;
        }
    }

    // Allows a token holder to destroy some of their tokens and reduce total supply.
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function mint(address to, uint256 amount) public onlyOwner nonReentrant{
        require(totalSupply() + amount <= _maximumSupply, "ERC20: cap exceeded");
        _mint(to, amount);
    }

    function maximumSupply() public view returns (uint256) {
        return _maximumSupply;
    }

    function decimals() public view virtual override returns (uint8) {
        return _customDecimals;
    }

    // Allow the owner to renounce ownership of the TokenFactory contract.
    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }
}
