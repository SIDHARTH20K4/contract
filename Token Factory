// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

interface ILockedTokenContract {
    function balanceOf(address account) external view returns (uint256);
    }

interface IVestedTokenContract {
    function balanceOf(address account) external view returns (uint256);
    }

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenFactory is Ownable, ReentrancyGuard {
    uint256 public creationFee;
    address payable public feeRecipient;
    mapping(address => address[]) public tokensCreatedBy;

    event TokenCreated(
        address indexed creator,
        address indexed tokenAddress,
        string tokenName,
        string tokenSymbol,
        uint256 indexed decimals,
        uint256 totalSupply
    );
    
    constructor(uint256 _creationFee, address payable _feeRecipient) {
        require(_feeRecipient != address(0), "Fee recipient cannot be the zero address");
        creationFee = _creationFee;
        feeRecipient = _feeRecipient;
    }

    function createToken(
        string memory name,
        string memory symbol,
        uint256 maximumSupply,
        uint8 decimals
        ) public payable nonReentrant {
        require(msg.value == creationFee, "Incorrect Fees");
        // Send the creation fee to the fee recipient
        feeRecipient.transfer(msg.value);

        uint256 supplyWithDecimals = maximumSupply * (10 ** uint256(decimals));
        NewToken mintToken = new NewToken(name, symbol, supplyWithDecimals, _msgSender(), decimals);
        mintToken.transferOwnership(_msgSender());
        tokensCreatedBy[_msgSender()].push(address(mintToken));
        emit TokenCreated(_msgSender(), address(mintToken), name, symbol, decimals, supplyWithDecimals);
    }

    function setCreationFee(uint256 newFee) external onlyOwner {
        creationFee = newFee;
    }

    function setFeeRecipient(address payable newRecipient) external onlyOwner {
        require(newRecipient != address(0), "New recipient cannot be the zero address");
        feeRecipient = newRecipient;
    }

    function getTokensCreatedBy(address creator) public view returns (address[] memory) {
        return tokensCreatedBy[creator];
    }

    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }
}

// NewToken extends the ERC20 implementation from OpenZeppelin and adds a burn function.
contract NewToken is ERC20, ERC20Burnable, Ownable, ReentrancyGuard {
    uint256 private _maximumSupply;
    uint8 private _customDecimals;
    bool private _mintingEnabled = true; // Minting is enabled by default
    address public lockedTokenContract;
    address public vestedTokenContract;
    uint256 public buyFeePercent;
    uint256 public sellFeePercent;
    address public treasury;
    
    event MintingDisabled();
    event TreasurySet(address indexed newTreasury);
    event BuyFeeUpdated(uint256 newFeePercent);
    event SellFeeUpdated(uint256 newFeePercent);
    event BuyFeeTransferred(address indexed from, address indexed to, uint256 feeAmount);
    event SellFeeTransferred(address indexed from, address indexed to, uint256 feeAmount);

    mapping(address => bool) public isLiquidityPool;

    constructor(
        string memory name,
        string memory symbol,
        uint256 maxSupply,
        address tokenOwner,
        uint8 Decimals
    ) ERC20(name, symbol) {
        require(tokenOwner != address(0), "Token owner cannot be the zero address");
        _customDecimals = Decimals;
        _maximumSupply = maxSupply;
        _mint(tokenOwner, maxSupply);
        buyFeePercent = 0;
        sellFeePercent = 0;
    }

    function mint(address to, uint256 amount) public onlyOwner nonReentrant {
        require(_mintingEnabled, "Minting has been disabled");
        require(totalSupply() + amount <= _maximumSupply, "Cannot exceed Maximum Supply");
        _mint(to, amount);
    }

    function disableMinting() public onlyOwner {
        _mintingEnabled = false;
        emit MintingDisabled();
    }

    function setLockedTokenContract(address _lockedTokenContract) external onlyOwner {
        lockedTokenContract = _lockedTokenContract;
    }

    function setVestedTokenContract(address _vestedTokenContract) external onlyOwner {
        vestedTokenContract = _vestedTokenContract;
    }

    function setBuyFeePercent(uint256 newFeePercent) external onlyOwner {
        require(newFeePercent <= 10, "Fee cannot exceed 10%");
        buyFeePercent = newFeePercent;
        emit BuyFeeUpdated(newFeePercent);
    }

    function setSellFeePercent(uint256 newFeePercent) external onlyOwner {
        require(newFeePercent <= 10, "Fee cannot exceed 10%");
        sellFeePercent = newFeePercent;
        emit SellFeeUpdated(newFeePercent);
    }

    function setTreasury(address _treasury) public onlyOwner {
        require(_treasury != address(0), "Treasury address cannot be zero");
        treasury = _treasury;
        emit TreasurySet(_treasury);
    }

    // Override the _transfer function to include fee logic
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        uint256 feeAmount;
        
        // Apply buy fee
        if (buyFeePercent > 0 && _isBuying(from)) {
            feeAmount = (amount * buyFeePercent) / 100;
            super._transfer(from, treasury, feeAmount);
            emit BuyFeeTransferred(from, treasury, feeAmount);
            amount -= feeAmount;
        }
        
        // Apply sell fee
        if (sellFeePercent > 0 && _isSelling(to)) {
            feeAmount = (amount * sellFeePercent) / 100;
            super._transfer(from, treasury, feeAmount);
            emit SellFeeTransferred(from, treasury, feeAmount);
            amount -= feeAmount;
        }

        super._transfer(from, to, amount);
    }
    
    function addLiquidityPool(address _pool) external onlyOwner {
        isLiquidityPool[_pool] = true;
    }

    function removeLiquidityPool(address _pool) external onlyOwner {
        isLiquidityPool[_pool] = false;
    }

    function _isBuying(address from) private view returns (bool) {
        return isLiquidityPool[from];
    }

    function _isSelling(address to) private view returns (bool) {
        return isLiquidityPool[to];
    }

    
    function maximumSupply() public view returns (uint256) {
        return _maximumSupply;
    }

    function circulatingSupply() public view returns (uint256) {
        uint256 lockedBalance = 0;
        uint256 vestedBalance = 0;

        if (lockedTokenContract != address(0)) {
            lockedBalance = ILockedTokenContract(lockedTokenContract).balanceOf(address(this));
        }

        if (vestedTokenContract != address(0)) {
            vestedBalance = IVestedTokenContract(vestedTokenContract).balanceOf(address(this));
        }

        return totalSupply() - (lockedBalance + vestedBalance);
    }

    function decimals() public view virtual override returns (uint8) {
        return _customDecimals;
    }

    function mintStatus() public view returns (bool) {
        return _mintingEnabled;
    }

    function renounceOwnership() public override onlyOwner {
        if (_mintingEnabled) {
            disableMinting(); // Disable minting if it's enabled
        }
        super.renounceOwnership();
    }
}
