// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract TokenFactory is Ownable, ReentrancyGuard {
    uint256 public creationFee;
    address payable public feeRecipient;
    mapping(address => address[]) public tokensCreatedBy;

    event TokenCreated(
        address indexed creator,
        address indexed tokenAddress,
        string tokenName,
        string tokenSymbol,
        uint256 indexed decimals,
        uint256 totalSupply
    );
    
    constructor(uint256 _creationFee, address payable _feeRecipient) {
        require(_feeRecipient != address(0), "Fee recipient cannot be the zero address");
        creationFee = _creationFee;
        feeRecipient = _feeRecipient;
    }

    function createToken(
        string memory name,
        string memory symbol,
        uint256 maximumSupply,
        uint8 decimals
        ) public payable nonReentrant {
        require(msg.value == creationFee, "Incorrect Fees");
        // Send the creation fee to the fee recipient
        feeRecipient.transfer(msg.value);

        uint256 supplyWithDecimals = maximumSupply * (10 ** uint256(decimals));
        NewToken mintToken = new NewToken(name, symbol, supplyWithDecimals, _msgSender(), decimals);
        mintToken.transferOwnership(_msgSender());
        tokensCreatedBy[_msgSender()].push(address(mintToken));
        emit TokenCreated(_msgSender(), address(mintToken), name, symbol, decimals, supplyWithDecimals);
    }

    function setCreationFee(uint256 newFee) external onlyOwner {
        creationFee = newFee;
    }

    function setFeeRecipient(address payable newRecipient) external onlyOwner {
        require(newRecipient != address(0), "New recipient cannot be the zero address");
        feeRecipient = newRecipient;
    }

    function getTokensCreatedBy(address creator) public view returns (address[] memory) {
        return tokensCreatedBy[creator];
    }

    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }
}

// NewToken extends the ERC20 implementation from OpenZeppelin and adds a burn function.
contract NewToken is ERC20, ERC20Burnable, Ownable, ReentrancyGuard {
    uint256 private _maximumSupply;
    uint8 private _customDecimals;
    bool public mintingEnabled = true; // Minting is enabled by default

    event MintingDisabled();

    constructor(
        string memory name,
        string memory symbol,
        uint256 maxSupply,
        address tokenOwner,
        uint8 Decimals
    ) ERC20(name, symbol) {
        require(tokenOwner != address(0), "Token owner cannot be the zero address");
        _customDecimals = Decimals;
        _maximumSupply = maxSupply;
        _mint(tokenOwner, maxSupply);
    }

    function mint(address to, uint256 amount) public onlyOwner nonReentrant {
        require(mintingEnabled, "Minting has been disabled");
        require(totalSupply() + amount <= _maximumSupply, "Cannot exceed Maximum Supply");
        _mint(to, amount);
    }

    function disableMinting() public onlyOwner {
        mintingEnabled = false;
        emit MintingDisabled();
    }

    function maximumSupply() public view returns (uint256) {
        return _maximumSupply;
    }

    function decimals() public view virtual override returns (uint8) {
        return _customDecimals;
    }

    // Allow the owner to renounce ownership of the TokenFactory contract.
    function renounceOwnership() public override onlyOwner {
        super.renounceOwnership();
    }
}
